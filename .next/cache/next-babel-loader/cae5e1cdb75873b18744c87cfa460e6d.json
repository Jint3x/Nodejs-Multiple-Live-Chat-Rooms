{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\n\nconst Post = () => {\n  const {\n    0: val,\n    1: setVal\n  } = useState(\"\");\n  const {\n    0: ws,\n    1: setWs\n  } = useState(\"\");\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function sendData() {\n    ws.send(val);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(() => {\n    let items = []; // This saves ALL messages\n\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    let ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    ws.addEventListener(\"message\", data => {\n      let newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n\n      newItems.push(data.data);\n      items.push(data.data);\n      setMessages(newItems);\n    });\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Input, {\n    value: val,\n    change: change,\n    log: sendData\n  }));\n}; // Render the input and the submit button\n\n\nfunction Input(props) {\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Click me to change\"));\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useRouter","useEffect","useState","Post","val","setVal","ws","setWs","messages","setMessages","change","e","target","value","sendData","send","items","id","location","pathname","split","length","WebSocket","addEventListener","data","newItems","slice","push","Input","props","log"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgBH,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM;AAAA,OAACI,EAAD;AAAA,OAAKC;AAAL,MAAcL,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAC,EAAD,CAAxC;;AAEA,WAASQ,MAAT,CAAgBC,CAAhB,EAAmB;AACfN,IAAAA,MAAM,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACH;;AAED,WAASC,QAAT,GAAoB;AAChBR,IAAAA,EAAE,CAACS,IAAH,CAAQX,GAAR;AACAC,IAAAA,MAAM,CAAC,EAAD,CAAN;AACH,GAZgB,CAenB;;;AACEJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,KAAK,GAAG,EAAZ,CADc,CACC;;AACf,QAAIC,EAAE,GAAGC,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BF,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BC,MAA7B,GAAsC,CAAnE,CAAT;AACA,QAAIf,EAAE,GAAI,IAAIgB,SAAJ,CAAc,yBAAuBL,EAArC,CAAV;AACAX,IAAAA,EAAE,CAACiB,gBAAH,CAAoB,SAApB,EAAgCC,IAAD,IAAU;AACrC,UAAIC,QAAQ,GAAGT,KAAK,CAACU,KAAN,CAAY,CAAZ,CAAf,CADqC,CACN;;AAC/BD,MAAAA,QAAQ,CAACE,IAAT,CAAcH,IAAI,CAACA,IAAnB;AACAR,MAAAA,KAAK,CAACW,IAAN,CAAWH,IAAI,CAACA,IAAhB;AACAf,MAAAA,WAAW,CAACgB,QAAD,CAAX;AACH,KALD;AAMAlB,IAAAA,KAAK,CAACD,EAAD,CAAL,CAVc,CAUJ;AACX,GAXQ,EAWN,EAXM,CAAT;AAgBA,SACC,4BACG,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEF,GAAd;AAAmB,IAAA,MAAM,EAAEM,MAA3B;AAAmC,IAAA,GAAG,EAAEI;AAAxC,IADH,CADD;AAKD,CArCD,C,CAuCA;;;AACA,SAASc,KAAT,CAAeC,KAAf,EAAsB;AAClB,SACI,mBACI;AAAO,IAAA,KAAK,EAAEA,KAAK,CAAChB,KAApB;AAA2B,IAAA,QAAQ,EAAEgB,KAAK,CAACnB;AAA3C,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAEmB,KAAK,CAACC;AAAvB,0BAFJ,CADJ;AAMH;;AAKD,eAAe3B,IAAf","sourcesContent":["import { useRouter } from 'next/router'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst Post = () => {\r\n  const [val, setVal] = useState(\"\")\r\n  const [ws, setWs] = useState(\"\")\r\n  const [messages, setMessages] = useState([])\r\n\r\n  function change(e) {\r\n      setVal(e.target.value)\r\n  }\r\n\r\n  function sendData() {\r\n      ws.send(val)\r\n      setVal(\"\")\r\n  }\r\n\r\n\r\n// Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n  useEffect(() => {\r\n    let items = [] // This saves ALL messages\r\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n    let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n    ws.addEventListener(\"message\", (data) => {\r\n        let newItems = items.slice(0,) // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n        newItems.push(data.data)\r\n        items.push(data.data)\r\n        setMessages(newItems)\r\n    })\r\n    setWs(ws) // set the WebSocket to be global\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  return (\r\n   <>\r\n      <Input value={val} change={change} log={sendData} />\r\n   </>\r\n  )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction Input(props) {\r\n    return (\r\n        <div>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Click me to change</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}