{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport styles from \"../../styles/chatroom.module.css\";\n\nfunction Post(req, res) {\n  console.log(res);\n  return __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Main, null));\n}\n\nfunction Header() {\n  const {\n    0: path,\n    1: setPath\n  } = useState(\"\");\n  useEffect(() => {\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    setPath(id);\n  }, []);\n  return __jsx(\"h1\", {\n    id: styles.heading\n  }, \"Chat Room: \", path);\n}\n\nfunction Main() {\n  const {\n    0: val,\n    1: setVal\n  } = useState(\"\");\n  const {\n    0: ws,\n    1: setWs\n  } = useState(\"\");\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function sendData() {\n    ws.send(val);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(() => {\n    let items = []; // This saves ALL messages\n\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    let ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    ws.addEventListener(\"message\");\n\n    function addItems(data) {}\n\n    ws.addEventListener(\"message\", data => {\n      let newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n\n      newItems.push(data.data);\n      items.push(data.data);\n      setMessages(newItems);\n    });\n    setWs(ws); // set the WebSocket to be global\n\n    return () => {};\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, null), __jsx(MessageSender, {\n    value: val,\n    change: change,\n    log: sendData\n  }), __jsx(MemberList, null));\n}\n\nfunction MessageLogger() {\n  return __jsx(\"div\", {\n    id: styles.msgLogger\n  });\n} // Render the input and the submit button\n\n\nfunction MessageSender(props) {\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Click me to change\"));\n}\n\nfunction MemberList() {\n  return __jsx(\"h1\", null, \"Test Section\");\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useEffect","useState","styles","Post","req","res","console","log","Header","path","setPath","id","location","pathname","split","length","heading","Main","val","setVal","ws","setWs","messages","setMessages","change","e","target","value","sendData","send","items","WebSocket","addEventListener","addItems","data","newItems","slice","push","MessageLogger","msgLogger","MessageSender","props","MemberList"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport styles from \"../../styles/chatroom.module.css\"\r\n\r\n\r\n\r\n\r\nfunction Post(req, res) {\r\n    console.log(res)\r\n    return (\r\n        <>\r\n        <Header />\r\n        <Main />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction Header() {\r\n    const [path, setPath] = useState(\"\")\r\n    useEffect(() => {\r\n        let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n        setPath(id)\r\n    }, [])\r\n\r\n\r\n    return (\r\n    <h1 id={styles.heading}>Chat Room: {path}</h1>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction Main() {\r\n    const [val, setVal] = useState(\"\")\r\n    const [ws, setWs] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n  \r\n    function change(e) {\r\n        setVal(e.target.value)\r\n    }\r\n  \r\n    function sendData() {\r\n        ws.send(val)\r\n        setVal(\"\")\r\n    }\r\n  \r\n  \r\n  // Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n    useEffect(() => {\r\n      let items = [] // This saves ALL messages\r\n      let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n      let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n\r\n      ws.addEventListener(\"message\", )\r\n\r\n     function addItems(data) {\r\n\r\n     }\r\n      ws.addEventListener(\"message\", (data) => {\r\n          let newItems = items.slice(0,) // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n          newItems.push(data.data)\r\n          items.push(data.data)\r\n          setMessages(newItems)\r\n      })\r\n      setWs(ws) // set the WebSocket to be global\r\n      return () => {\r\n\r\n      }\r\n    }, [])\r\n  \r\n\r\n    return (\r\n        <>\r\n        <MessageLogger />\r\n        <MessageSender value={val} change={change} log={sendData} />\r\n        <MemberList />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction MessageLogger() {\r\n    return (\r\n        <div id={styles.msgLogger}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction MessageSender(props) {\r\n    return (\r\n        <div>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Click me to change</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction MemberList() {\r\n    return <h1>Test Section</h1>\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}