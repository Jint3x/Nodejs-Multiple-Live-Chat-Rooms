{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\n\nconst Post = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    0: val,\n    1: setVal\n  } = useState(\"\");\n  const {\n    0: ws,\n    1: setWs\n  } = useState(\"\");\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function send() {\n    ws.send(val);\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(() => {\n    let items = [];\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    let ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    ws.addEventListener(\"message\", data => {\n      items.push(data.data);\n      setMessages(items);\n    });\n    setWs(ws);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Info, {\n    messages: messages\n  }), __jsx(Input, {\n    value: val,\n    change: change,\n    log: send\n  }));\n}; // Render the input and the submit button\n\n\nfunction Input(props) {\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Click me to change\"));\n} // Render all messages\n\n\nfunction Info(props) {\n  let messages = props.messages;\n  let lists = messages.forEach(element => {\n    __jsx(List, {\n      message: element,\n      key: element.toString()\n    });\n  });\n  return __jsx(\"h1\", null, messages);\n}\n\nfunction List(props) {\n  return __jsx(\"li\", null, props.message);\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useRouter","useEffect","useState","Post","router","id","query","val","setVal","ws","setWs","messages","setMessages","change","e","target","value","send","items","location","pathname","split","length","WebSocket","addEventListener","data","push","Input","props","log","Info","lists","forEach","element","toString","List","message"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,QAAM;AAAEK,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB;AACA,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgBN,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM;AAAA,OAACO,EAAD;AAAA,OAAKC;AAAL,MAAcR,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,EAAD,CAAxC;;AAEA,WAASW,MAAT,CAAgBC,CAAhB,EAAmB;AACfN,IAAAA,MAAM,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACH;;AAED,WAASC,IAAT,GAAgB;AACZR,IAAAA,EAAE,CAACQ,IAAH,CAAQV,GAAR;AACH,GAbgB,CAgBnB;;;AACEN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,KAAK,GAAG,EAAZ;AACA,QAAIb,EAAE,GAAGc,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BF,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BC,MAA7B,GAAsC,CAAnE,CAAT;AACA,QAAIb,EAAE,GAAI,IAAIc,SAAJ,CAAc,yBAAuBlB,EAArC,CAAV;AACAI,IAAAA,EAAE,CAACe,gBAAH,CAAoB,SAApB,EAAgCC,IAAD,IAAU;AACrCP,MAAAA,KAAK,CAACQ,IAAN,CAAWD,IAAI,CAACA,IAAhB;AACAb,MAAAA,WAAW,CAACM,KAAD,CAAX;AACH,KAHD;AAIAR,IAAAA,KAAK,CAACD,EAAD,CAAL;AACD,GATQ,EASN,EATM,CAAT;AAcA,SACC,4BACG,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEE;AAAhB,IADH,EAEG,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEJ,GAAd;AAAmB,IAAA,MAAM,EAAEM,MAA3B;AAAmC,IAAA,GAAG,EAAEI;AAAxC,IAFH,CADD;AAMD,CArCD,C,CAuCA;;;AACA,SAASU,KAAT,CAAeC,KAAf,EAAsB;AAClB,SACI,mBACI;AAAO,IAAA,KAAK,EAAEA,KAAK,CAACZ,KAApB;AAA2B,IAAA,QAAQ,EAAEY,KAAK,CAACf;AAA3C,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAEe,KAAK,CAACC;AAAvB,0BAFJ,CADJ;AAMH,C,CAGD;;;AACA,SAASC,IAAT,CAAcF,KAAd,EAAqB;AACjB,MAAIjB,QAAQ,GAAGiB,KAAK,CAACjB,QAArB;AACA,MAAIoB,KAAK,GAAGpB,QAAQ,CAACqB,OAAT,CAAkBC,OAAD,IAAa;AACtC,UAAC,IAAD;AAAM,MAAA,OAAO,EAAEA,OAAf;AAAwB,MAAA,GAAG,EAAEA,OAAO,CAACC,QAAR;AAA7B;AACH,GAFW,CAAZ;AAGA,SACA,kBAAKvB,QAAL,CADA;AAGC;;AAEL,SAASwB,IAAT,CAAcP,KAAd,EAAqB;AACjB,SAAO,kBAAKA,KAAK,CAACQ,OAAX,CAAP;AACH;;AAID,eAAejC,IAAf","sourcesContent":["import { useRouter } from 'next/router'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst Post = () => {\r\n  const router = useRouter()\r\n  const { id } = router.query\r\n  const [val, setVal] = useState(\"\")\r\n  const [ws, setWs] = useState(\"\")\r\n  const [messages, setMessages] = useState([])\r\n\r\n  function change(e) {\r\n      setVal(e.target.value)\r\n  }\r\n\r\n  function send() {\r\n      ws.send(val)\r\n  }\r\n\r\n\r\n// Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n  useEffect(() => {\r\n    let items = []\r\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n    let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n    ws.addEventListener(\"message\", (data) => {\r\n        items.push(data.data)\r\n        setMessages(items)\r\n    })\r\n    setWs(ws)\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  return (\r\n   <>\r\n      <Info messages={messages}/>\r\n      <Input value={val} change={change} log={send} />\r\n   </>\r\n  )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction Input(props) {\r\n    return (\r\n        <div>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Click me to change</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// Render all messages\r\nfunction Info(props) {\r\n    let messages = props.messages\r\n    let lists = messages.forEach((element) => {\r\n        <List message={element} key={element.toString()}/>\r\n    })\r\n    return (\r\n    <h1>{messages}</h1>\r\n    )\r\n    }\r\n\r\nfunction List(props) {\r\n    return <li>{props.message}</li>\r\n}\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}