{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport styles from \"../../styles/chatroom.module.css\";\n\nfunction Post(req, res) {\n  // Check if they have a username, if not ask them for one\n  useEffect(() => {\n    if (!document.cookie.split(\";\").some(element => element.includes(\"username\"))) {\n      let username = prompt(\"Enter your username\");\n      document.cookie = `username=${username}`;\n    }\n  });\n  return __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Main, null));\n}\n\nfunction Header() {\n  const {\n    0: path,\n    1: setPath\n  } = useState(\"\");\n  useEffect(() => {\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    console.log(id.replace(/20%/gi, \" \"));\n    setPath(id.replace(/20%/gi, \" \"));\n  }, []);\n  return __jsx(\"h1\", {\n    id: styles.heading\n  }, \"Chat Room: \", path);\n}\n\nfunction Main(props) {\n  const {\n    0: val,\n    1: setVal\n  } = useState(\"\");\n  const {\n    0: ws,\n    1: setWs\n  } = useState(\"\");\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: connected,\n    1: setConnected\n  } = useState(0);\n  const {\n    0: user,\n    1: setUser\n  } = useState(\"\");\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function sendData() {\n    if (val === \"\") return;\n    ws.send(`${user}: ${val}`);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(() => {\n    let items = []; // This saves ALL messages\n\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    let ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    let validUser = document.cookie.split(\";\").find(element => element.includes(\"username\")).split(\"=\")[1];\n    ws.addEventListener(\"message\", addItems);\n    ws.addEventListener(\"open\", () => {\n      ws.send(`${validUser} has joined the chat`);\n    });\n    window.addEventListener(\"unload\", () => {\n      ws.send(`${validUser} has left the chat`);\n    });\n\n    function addItems(info) {\n      let data = JSON.parse(info.data);\n      let newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n\n      if (data.connected !== undefined) {\n        setConnected(data.connected);\n        return;\n      }\n\n      newItems.unshift(data.data);\n      items.unshift(data.data);\n      setMessages(newItems);\n      setUser(validUser);\n    }\n\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, {\n    messages: messages\n  }), __jsx(MessageSender, {\n    value: val,\n    change: change,\n    log: sendData\n  }), __jsx(MemberList, {\n    clients: connected\n  }));\n}\n\nfunction MessageLogger(props) {\n  let messages = props.messages;\n  let listMessages = messages.map(element => {\n    return __jsx(Message, {\n      data: element,\n      key: `${element.toString()}${Math.floor(Math.random() * 100000)}`\n    });\n  });\n  return __jsx(\"div\", {\n    id: styles.msgLogger\n  }, __jsx(\"ul\", {\n    id: styles.messages\n  }, listMessages));\n} // Render the input and the submit button\n\n\nfunction MessageSender(props) {\n  return __jsx(\"div\", {\n    id: styles.SendMessages\n  }, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Send Message\"));\n}\n\nfunction MemberList(props) {\n  return __jsx(\"div\", {\n    id: styles.connected\n  }, __jsx(\"h1\", null, \"Currently Connected Members: \", props.clients));\n}\n\nfunction Message(props) {\n  return __jsx(\"li\", null, props.data);\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useEffect","useState","styles","Post","req","res","document","cookie","split","some","element","includes","username","prompt","Header","path","setPath","id","location","pathname","length","console","log","replace","heading","Main","props","val","setVal","ws","setWs","messages","setMessages","connected","setConnected","user","setUser","change","e","target","value","sendData","send","items","WebSocket","validUser","find","addEventListener","addItems","window","info","data","JSON","parse","newItems","slice","undefined","unshift","MessageLogger","listMessages","map","toString","Math","floor","random","msgLogger","MessageSender","SendMessages","MemberList","clients","Message"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport styles from \"../../styles/chatroom.module.css\"\r\n\r\n\r\n\r\n\r\nfunction Post(req, res) {\r\n\r\n    // Check if they have a username, if not ask them for one\r\n    useEffect(() => {\r\n        if (!document.cookie.split(\";\").some(element => element.includes(\"username\"))) {\r\n            let username = prompt(\"Enter your username\")\r\n            document.cookie = `username=${username}`\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n        <Header />\r\n        <Main/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction Header() {\r\n    const [path, setPath] = useState(\"\")\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n        console.log(id.replace(/20%/gi, \" \"))\r\n        setPath(id.replace(/20%/gi, \" \"))\r\n\r\n    }, [])\r\n    return (\r\n    <h1 id={styles.heading}>Chat Room: {path}</h1>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction Main(props) {\r\n    const [val, setVal] = useState(\"\")\r\n    const [ws, setWs] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n    const [connected, setConnected] = useState(0)\r\n    const [user, setUser] = useState(\"\")\r\n\r\n    function change(e) {\r\n        setVal(e.target.value)\r\n    }\r\n  \r\n    function sendData() {\r\n        if (val === \"\") return;\r\n        ws.send(`${user}: ${val}`)\r\n        setVal(\"\")\r\n    }\r\n  \r\n  \r\n  // Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n    useEffect(() => {\r\n      let items = [] // This saves ALL messages\r\n      let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n      let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n      let validUser = document.cookie.split(\";\").find(element => element.includes(\"username\")).split(\"=\")[1];\r\n\r\n      ws.addEventListener(\"message\", addItems) \r\n\r\n\r\n      ws.addEventListener(\"open\", () => {\r\n          ws.send(`${validUser} has joined the chat`)\r\n      })\r\n\r\n\r\n      window.addEventListener(\"unload\", () => {\r\n          ws.send(`${validUser} has left the chat`)\r\n      })\r\n\r\n      \r\n     function addItems(info) {\r\n        let data = JSON.parse(info.data)\r\n        let newItems = items.slice(0,)  // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n\r\n        if (data.connected !== undefined) {\r\n            setConnected(data.connected)\r\n            return;\r\n        }\r\n\r\n        newItems.unshift(data.data)\r\n        items.unshift(data.data)\r\n        setMessages(newItems)\r\n        setUser(validUser)\r\n     }\r\n  \r\n      setWs(ws) // set the WebSocket to be global\r\n     \r\n    }, [])\r\n  \r\n    return (\r\n        <>\r\n        <MessageLogger messages={messages}/>\r\n        <MessageSender value={val} change={change} log={sendData} />\r\n        <MemberList clients={connected}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction MessageLogger(props) {\r\n    let messages = props.messages\r\n    let listMessages = messages.map(element => {\r\n        return <Message data={element} key={`${element.toString()}${Math.floor(Math.random() * 100000)}`} />\r\n    })\r\n\r\n\r\n    return (\r\n        <div id={styles.msgLogger}>\r\n            <ul id={styles.messages}>\r\n            {listMessages}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction MessageSender(props) {\r\n    return (\r\n        <div id={styles.SendMessages}>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Send Message</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction MemberList(props) {\r\n    return (\r\n        <div id={styles.connected}>\r\n      <h1>Currently Connected Members: {props.clients}</h1>\r\n      </div>\r\n    ) \r\n}\r\n\r\n\r\nfunction Message(props) {\r\n    return <li>{props.data}</li>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}