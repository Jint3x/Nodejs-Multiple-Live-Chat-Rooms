{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport styles from \"../../styles/chatroom.module.css\";\n\nfunction Post(req, res) {\n  console.log(req);\n  return __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Main, null));\n}\n\n_c = Post;\n\nfunction Header() {\n  //let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n  var id = \"asd\";\n  return __jsx(\"h1\", {\n    id: styles.heading\n  }, \"Chat Room: \", id);\n}\n\n_c2 = Header;\n\nfunction Main() {\n  _s();\n\n  var _useState = useState(\"\"),\n      val = _useState[0],\n      setVal = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      ws = _useState2[0],\n      setWs = _useState2[1];\n\n  var _useState3 = useState([]),\n      messages = _useState3[0],\n      setMessages = _useState3[1];\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function sendData() {\n    ws.send(val);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(function () {\n    var items = []; // This saves ALL messages\n    //let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n\n    var id = \"test\";\n    var ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    ws.addEventListener(\"message\", function (data) {\n      var newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n\n      newItems.push(data.data);\n      items.push(data.data);\n      setMessages(newItems);\n    });\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, null), __jsx(MessageSender, {\n    value: val,\n    change: change,\n    log: sendData\n  }), __jsx(MemberList, null));\n}\n\n_s(Main, \"x6QF6x7p0Ge2ht2reIvPG8+E5oA=\");\n\n_c3 = Main;\n\nfunction MessageLogger() {\n  return __jsx(\"h1\", null, \"Test Section\");\n} // Render the input and the submit button\n\n\n_c4 = MessageLogger;\n\nfunction MessageSender(props) {\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Click me to change\"));\n}\n\n_c5 = MessageSender;\n\nfunction MemberList() {\n  return __jsx(\"h1\", null, \"Test Section\");\n}\n\n_c6 = MemberList;\nexport default Post;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Main\");\n$RefreshReg$(_c4, \"MessageLogger\");\n$RefreshReg$(_c5, \"MessageSender\");\n$RefreshReg$(_c6, \"MemberList\");","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useEffect","useState","styles","Post","req","res","console","log","Header","id","heading","Main","val","setVal","ws","setWs","messages","setMessages","change","e","target","value","sendData","send","items","WebSocket","addEventListener","data","newItems","slice","push","MessageLogger","MessageSender","props","MemberList"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,kCAAnB;;AAKA,SAASC,IAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwB;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,SACI,4BACA,MAAC,MAAD,OADA,EAEA,MAAC,IAAD,OAFA,CADJ;AAMH;;KARQD,I;;AAWT,SAASK,MAAT,GAAkB;AACd;AACA,MAAIC,EAAE,GAAG,KAAT;AACA,SACA;AAAI,IAAA,EAAE,EAAEP,MAAM,CAACQ;AAAf,oBAAoCD,EAApC,CADA;AAGH;;MANQD,M;;AAWT,SAASG,IAAT,GAAgB;AAAA;;AAAA,kBACUV,QAAQ,CAAC,EAAD,CADlB;AAAA,MACLW,GADK;AAAA,MACAC,MADA;;AAAA,mBAEQZ,QAAQ,CAAC,EAAD,CAFhB;AAAA,MAELa,EAFK;AAAA,MAEDC,KAFC;;AAAA,mBAGoBd,QAAQ,CAAC,EAAD,CAH5B;AAAA,MAGLe,QAHK;AAAA,MAGKC,WAHL;;AAKZ,WAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACfN,IAAAA,MAAM,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACH;;AAED,WAASC,QAAT,GAAoB;AAChBR,IAAAA,EAAE,CAACS,IAAH,CAAQX,GAAR;AACAC,IAAAA,MAAM,CAAC,EAAD,CAAN;AACH,GAZW,CAed;;;AACEb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIwB,KAAK,GAAG,EAAZ,CADc,CACC;AACf;;AACA,QAAIf,EAAE,GAAG,MAAT;AACA,QAAIK,EAAE,GAAI,IAAIW,SAAJ,CAAc,yBAAuBhB,EAArC,CAAV;AACAK,IAAAA,EAAE,CAACY,gBAAH,CAAoB,SAApB,EAA+B,UAACC,IAAD,EAAU;AACrC,UAAIC,QAAQ,GAAGJ,KAAK,CAACK,KAAN,CAAY,CAAZ,CAAf,CADqC,CACN;;AAC/BD,MAAAA,QAAQ,CAACE,IAAT,CAAcH,IAAI,CAACA,IAAnB;AACAH,MAAAA,KAAK,CAACM,IAAN,CAAWH,IAAI,CAACA,IAAhB;AACAV,MAAAA,WAAW,CAACW,QAAD,CAAX;AACH,KALD;AAMAb,IAAAA,KAAK,CAACD,EAAD,CAAL,CAXc,CAWJ;AACX,GAZQ,EAYN,EAZM,CAAT;AAeA,SACI,4BACA,MAAC,aAAD,OADA,EAEA,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEF,GAAtB;AAA2B,IAAA,MAAM,EAAEM,MAAnC;AAA2C,IAAA,GAAG,EAAEI;AAAhD,IAFA,EAGA,MAAC,UAAD,OAHA,CADJ;AAOH;;GAtCQX,I;;MAAAA,I;;AA0CT,SAASoB,aAAT,GAAyB;AACrB,SACI,iCADJ;AAGH,C,CAED;;;MANSA,a;;AAOT,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,SACI,mBACI;AAAO,IAAA,KAAK,EAAEA,KAAK,CAACZ,KAApB;AAA2B,IAAA,QAAQ,EAAEY,KAAK,CAACf;AAA3C,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAEe,KAAK,CAAC1B;AAAvB,0BAFJ,CADJ;AAMH;;MAPQyB,a;;AAUT,SAASE,UAAT,GAAsB;AAClB,SAAO,iCAAP;AACH;;MAFQA,U;AAQT,eAAe/B,IAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport styles from \"../../styles/chatroom.module.css\"\r\n\r\n\r\n\r\n\r\nfunction Post(req, res) {\r\n    console.log(req)\r\n    return (\r\n        <>\r\n        <Header />\r\n        <Main />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction Header() {\r\n    //let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n    let id = \"asd\"\r\n    return (\r\n    <h1 id={styles.heading}>Chat Room: {id}</h1>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction Main() {\r\n    const [val, setVal] = useState(\"\")\r\n    const [ws, setWs] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n  \r\n    function change(e) {\r\n        setVal(e.target.value)\r\n    }\r\n  \r\n    function sendData() {\r\n        ws.send(val)\r\n        setVal(\"\")\r\n    }\r\n  \r\n  \r\n  // Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n    useEffect(() => {\r\n      let items = [] // This saves ALL messages\r\n      //let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n      let id = \"test\"\r\n      let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n      ws.addEventListener(\"message\", (data) => {\r\n          let newItems = items.slice(0,) // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n          newItems.push(data.data)\r\n          items.push(data.data)\r\n          setMessages(newItems)\r\n      })\r\n      setWs(ws) // set the WebSocket to be global\r\n    }, [])\r\n  \r\n\r\n    return (\r\n        <>\r\n        <MessageLogger />\r\n        <MessageSender value={val} change={change} log={sendData} />\r\n        <MemberList />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction MessageLogger() {\r\n    return (\r\n        <h1>Test Section</h1>\r\n    )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction MessageSender(props) {\r\n    return (\r\n        <div>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Click me to change</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction MemberList() {\r\n    return <h1>Test Section</h1>\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}