{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport styles from \"../../styles/chatroom.module.css\";\n\nfunction Post(req, res) {\n  const {\n    0: username,\n    1: setUsername\n  } = useState(\"\");\n  useEffect(() => {\n    if (!document.cookie.split(\";\").some(element => element.includes(\"username\"))) {\n      let username = prompt(\"Enter your username\");\n      document.cookie = `username=${username}`;\n    }\n\n    let validUser = document.cookie.split(\";\").find(element => element.includes(\"username\")).split(\"=\")[1];\n    setUsername(validUser);\n  });\n  return __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Main, {\n    username: username\n  }));\n}\n\nfunction Header() {\n  const {\n    0: path,\n    1: setPath\n  } = useState(\"\");\n  useEffect(() => {\n    console.log(document.cookie);\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    setPath(id);\n  }, []);\n  return __jsx(\"h1\", {\n    id: styles.heading\n  }, \"Chat Room: \", path);\n}\n\nfunction Main(props) {\n  const {\n    0: val,\n    1: setVal\n  } = useState(\"\");\n  const {\n    0: ws,\n    1: setWs\n  } = useState(\"\");\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: connected,\n    1: setConnected\n  } = useState(0);\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function sendData() {\n    ws.send(val);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(() => {\n    let items = []; // This saves ALL messages\n\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    let ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    ws.addEventListener(\"message\", addItems);\n    ws.addEventListener(\"open\", () => {\n      ws.send(`${props.username} has joined the chat`);\n    });\n    ws.addEventListener(\"close\", () => {\n      ws.send(`${props.username} has left the chat`);\n    });\n\n    function addItems(info) {\n      let data = JSON.parse(info.data);\n      let newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n\n      if (data.connected !== undefined) {\n        setConnected(data.connected);\n        return;\n      }\n\n      newItems.unshift(data.data);\n      items.unshift(data.data);\n      setMessages(newItems);\n    }\n\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, {\n    messages: messages\n  }), __jsx(MessageSender, {\n    value: val,\n    change: change,\n    log: sendData\n  }), __jsx(MemberList, {\n    clients: connected\n  }));\n}\n\nfunction MessageLogger(props) {\n  let messages = props.messages;\n  let listMessages = messages.map(element => {\n    return __jsx(Message, {\n      data: element,\n      key: element.toString()\n    });\n  });\n  return __jsx(\"div\", {\n    id: styles.msgLogger\n  }, __jsx(\"ul\", {\n    id: styles.messages\n  }, listMessages));\n} // Render the input and the submit button\n\n\nfunction MessageSender(props) {\n  return __jsx(\"div\", {\n    id: styles.SendMessages\n  }, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Send Message\"));\n}\n\nfunction MemberList(props) {\n  return __jsx(\"div\", {\n    id: styles.connected\n  }, __jsx(\"h1\", null, \"Currently Connected Members: \", props.clients));\n}\n\nfunction Message(props) {\n  return __jsx(\"li\", null, props.data);\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useEffect","useState","styles","Post","req","res","username","setUsername","document","cookie","split","some","element","includes","prompt","validUser","find","Header","path","setPath","console","log","id","location","pathname","length","heading","Main","props","val","setVal","ws","setWs","messages","setMessages","connected","setConnected","change","e","target","value","sendData","send","items","WebSocket","addEventListener","addItems","info","data","JSON","parse","newItems","slice","undefined","unshift","MessageLogger","listMessages","map","toString","msgLogger","MessageSender","SendMessages","MemberList","clients","Message"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport styles from \"../../styles/chatroom.module.css\"\r\n\r\n\r\n\r\n\r\nfunction Post(req, res) {\r\n    const [username, setUsername] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if (!document.cookie.split(\";\").some(element => element.includes(\"username\"))) {\r\n            let username = prompt(\"Enter your username\")\r\n            document.cookie = `username=${username}`\r\n        }\r\n        let validUser = document.cookie.split(\";\").find(element => element.includes(\"username\")).split(\"=\")[1];\r\n        setUsername(validUser)\r\n    })\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <Header />\r\n        <Main username={username}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction Header() {\r\n    const [path, setPath] = useState(\"\")\r\n\r\n\r\n    useEffect(() => {\r\n    \r\n        console.log(document.cookie)\r\n        let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n        setPath(id)\r\n    }, [])\r\n\r\n    return (\r\n    <h1 id={styles.heading}>Chat Room: {path}</h1>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction Main(props) {\r\n    const [val, setVal] = useState(\"\")\r\n    const [ws, setWs] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n    const [connected, setConnected] = useState(0)\r\n\r\n    function change(e) {\r\n        setVal(e.target.value)\r\n    }\r\n  \r\n    function sendData() {\r\n        ws.send(val)\r\n        setVal(\"\")\r\n    }\r\n  \r\n  \r\n  // Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n    useEffect(() => {\r\n      let items = [] // This saves ALL messages\r\n      let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n      let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n\r\n      ws.addEventListener(\"message\", addItems) \r\n\r\n      ws.addEventListener(\"open\", () => {\r\n          ws.send(`${props.username} has joined the chat`)\r\n      })\r\n\r\n      ws.addEventListener(\"close\", () => {\r\n          ws.send(`${props.username} has left the chat`)\r\n      })\r\n\r\n     function addItems(info) {\r\n        let data = JSON.parse(info.data)\r\n        let newItems = items.slice(0,)  // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n\r\n        if (data.connected !== undefined) {\r\n            setConnected(data.connected)\r\n            return;\r\n        }\r\n\r\n        newItems.unshift(data.data)\r\n        items.unshift(data.data)\r\n        setMessages(newItems)\r\n     }\r\n  \r\n      setWs(ws) // set the WebSocket to be global\r\n     \r\n    }, [])\r\n  \r\n    return (\r\n        <>\r\n        <MessageLogger messages={messages}/>\r\n        <MessageSender value={val} change={change} log={sendData} />\r\n        <MemberList clients={connected}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction MessageLogger(props) {\r\n    let messages = props.messages\r\n    let listMessages = messages.map(element => {\r\n        return <Message data={element} key={element.toString()} />\r\n    })\r\n\r\n\r\n    return (\r\n        <div id={styles.msgLogger}>\r\n            <ul id={styles.messages}>\r\n            {listMessages}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction MessageSender(props) {\r\n    return (\r\n        <div id={styles.SendMessages}>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Send Message</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction MemberList(props) {\r\n    return (\r\n        <div id={styles.connected}>\r\n      <h1>Currently Connected Members: {props.clients}</h1>\r\n      </div>\r\n    ) \r\n}\r\n\r\n\r\nfunction Message(props) {\r\n    return <li>{props.data}</li>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}