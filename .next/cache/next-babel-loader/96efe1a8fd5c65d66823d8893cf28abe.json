{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport styles from \"../../styles/chatroom.css\";\n\nfunction Post() {\n  return __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Post2, null));\n}\n\nfunction Header() {\n  console.log(location.pathname);\n  let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n  return __jsx(\"h1\", {\n    id: styles.heading\n  }, \"Chat Room: \", id);\n}\n\nconst Post2 = () => {\n  const {\n    0: val,\n    1: setVal\n  } = useState(\"\");\n  const {\n    0: ws,\n    1: setWs\n  } = useState(\"\");\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function sendData() {\n    ws.send(val);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(() => {\n    let items = []; // This saves ALL messages\n\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    let ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    ws.addEventListener(\"message\", data => {\n      let newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n\n      newItems.push(data.data);\n      items.push(data.data);\n      setMessages(newItems);\n    });\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, null), __jsx(Input, {\n    value: val,\n    change: change,\n    log: sendData\n  }));\n};\n\nfunction MessageLogger() {\n  return __jsx(\"h1\", null, \"Test Section\");\n} // Render the input and the submit button\n\n\nfunction Input(props) {\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Click me to change\"));\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useEffect","useState","styles","Post","Header","console","log","location","pathname","id","split","length","heading","Post2","val","setVal","ws","setWs","messages","setMessages","change","e","target","value","sendData","send","items","WebSocket","addEventListener","data","newItems","slice","push","MessageLogger","Input","props"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,2BAAnB;;AAKA,SAASC,IAAT,GAAgB;AACZ,SACI,4BACA,MAAC,MAAD,OADA,EAEA,MAAC,KAAD,OAFA,CADJ;AAMH;;AAGD,SAASC,MAAT,GAAkB;AACdC,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACC,QAArB;AACA,MAAIC,EAAE,GAAGF,QAAQ,CAACC,QAAT,CAAkBE,KAAlB,CAAwB,GAAxB,EAA6BH,QAAQ,CAACC,QAAT,CAAkBE,KAAlB,CAAwB,GAAxB,EAA6BC,MAA7B,GAAsC,CAAnE,CAAT;AACA,SACA;AAAI,IAAA,EAAE,EAAET,MAAM,CAACU;AAAf,oBAAoCH,EAApC,CADA;AAGH;;AAED,MAAMI,KAAK,GAAG,MAAM;AAClB,QAAM;AAAA,OAACC,GAAD;AAAA,OAAMC;AAAN,MAAgBd,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM;AAAA,OAACe,EAAD;AAAA,OAAKC;AAAL,MAAchB,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM;AAAA,OAACiB,QAAD;AAAA,OAAWC;AAAX,MAA0BlB,QAAQ,CAAC,EAAD,CAAxC;;AAEA,WAASmB,MAAT,CAAgBC,CAAhB,EAAmB;AACfN,IAAAA,MAAM,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACH;;AAED,WAASC,QAAT,GAAoB;AAChBR,IAAAA,EAAE,CAACS,IAAH,CAAQX,GAAR;AACAC,IAAAA,MAAM,CAAC,EAAD,CAAN;AACH,GAZiB,CAepB;;;AACEf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,KAAK,GAAG,EAAZ,CADc,CACC;;AACf,QAAIjB,EAAE,GAAGF,QAAQ,CAACC,QAAT,CAAkBE,KAAlB,CAAwB,GAAxB,EAA6BH,QAAQ,CAACC,QAAT,CAAkBE,KAAlB,CAAwB,GAAxB,EAA6BC,MAA7B,GAAsC,CAAnE,CAAT;AACA,QAAIK,EAAE,GAAI,IAAIW,SAAJ,CAAc,yBAAuBlB,EAArC,CAAV;AACAO,IAAAA,EAAE,CAACY,gBAAH,CAAoB,SAApB,EAAgCC,IAAD,IAAU;AACrC,UAAIC,QAAQ,GAAGJ,KAAK,CAACK,KAAN,CAAY,CAAZ,CAAf,CADqC,CACN;;AAC/BD,MAAAA,QAAQ,CAACE,IAAT,CAAcH,IAAI,CAACA,IAAnB;AACAH,MAAAA,KAAK,CAACM,IAAN,CAAWH,IAAI,CAACA,IAAhB;AACAV,MAAAA,WAAW,CAACW,QAAD,CAAX;AACH,KALD;AAMAb,IAAAA,KAAK,CAACD,EAAD,CAAL,CAVc,CAUJ;AACX,GAXQ,EAWN,EAXM,CAAT;AAgBA,SACC,4BACE,MAAC,aAAD,OADF,EAEE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEF,GAAd;AAAmB,IAAA,MAAM,EAAEM,MAA3B;AAAmC,IAAA,GAAG,EAAEI;AAAxC,IAFF,CADD;AAMD,CAtCD;;AA0CA,SAASS,aAAT,GAAyB;AACrB,SACI,iCADJ;AAGH,C,CAGD;;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB,SACI,mBACI;AAAO,IAAA,KAAK,EAAEA,KAAK,CAACZ,KAApB;AAA2B,IAAA,QAAQ,EAAEY,KAAK,CAACf;AAA3C,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAEe,KAAK,CAAC7B;AAAvB,0BAFJ,CADJ;AAMH;;AAKD,eAAeH,IAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport styles from \"../../styles/chatroom.css\"\r\n\r\n\r\n\r\n\r\nfunction Post() {\r\n    return (\r\n        <>\r\n        <Header />\r\n        <Post2 />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction Header() {\r\n    console.log(location.pathname)\r\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n    return (\r\n    <h1 id={styles.heading}>Chat Room: {id}</h1>\r\n    )\r\n}\r\n\r\nconst Post2 = () => {\r\n  const [val, setVal] = useState(\"\")\r\n  const [ws, setWs] = useState(\"\")\r\n  const [messages, setMessages] = useState([])\r\n\r\n  function change(e) {\r\n      setVal(e.target.value)\r\n  }\r\n\r\n  function sendData() {\r\n      ws.send(val)\r\n      setVal(\"\")\r\n  }\r\n\r\n\r\n// Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n  useEffect(() => {\r\n    let items = [] // This saves ALL messages\r\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n    let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n    ws.addEventListener(\"message\", (data) => {\r\n        let newItems = items.slice(0,) // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n        newItems.push(data.data)\r\n        items.push(data.data)\r\n        setMessages(newItems)\r\n    })\r\n    setWs(ws) // set the WebSocket to be global\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  return (\r\n   <>\r\n     <MessageLogger />\r\n     <Input value={val} change={change} log={sendData} />\r\n   </>\r\n  )\r\n}\r\n\r\n\r\n\r\nfunction MessageLogger() {\r\n    return (\r\n        <h1>Test Section</h1>\r\n    )\r\n}\r\n\r\n\r\n// Render the input and the submit button\r\nfunction Input(props) {\r\n    return (\r\n        <div>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Click me to change</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}