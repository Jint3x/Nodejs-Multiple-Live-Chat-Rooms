{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\n\nvar Post = function Post() {\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useState = useState(\"\"),\n      val = _useState[0],\n      setVal = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      ws = _useState2[0],\n      setWs = _useState2[1];\n\n  var _useState3 = useState([]),\n      messages = _useState3[0],\n      setMessages = _useState3[1];\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function sendData() {\n    ws.send(val);\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(function () {\n    var items = [];\n    var id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    var ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    ws.addEventListener(\"message\", function (data) {\n      items.push(data.data);\n      setMessages(items);\n    });\n    setWs(ws);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Info, {\n    messages: messages\n  }), __jsx(Input, {\n    value: val,\n    change: change,\n    log: sendData\n  }));\n}; // Render the input and the submit button\n\n\n_s(Post, \"S03GG14uHiBiC0K3EeYK2wU2q/0=\", false, function () {\n  return [useRouter];\n});\n\n_c = Post;\n\nfunction Input(props) {\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Click me to change\"));\n} // Render all messages\n\n\n_c2 = Input;\n\nfunction Info(props) {\n  var messages = props.messages;\n  var lists = messages.map(function (element) {\n    return __jsx(List, {\n      message: element,\n      key: element.toString()\n    });\n  });\n  console.log(messages, lists);\n  return __jsx(\"ul\", null, lists);\n}\n\n_c3 = Info;\n\nfunction List(props) {\n  return __jsx(\"li\", null, props.message);\n}\n\n_c4 = List;\nexport default Post;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Info\");\n$RefreshReg$(_c4, \"List\");","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useRouter","useEffect","useState","Post","router","id","query","val","setVal","ws","setWs","messages","setMessages","change","e","target","value","sendData","send","items","location","pathname","split","length","WebSocket","addEventListener","data","push","Input","props","log","Info","lists","map","element","toString","console","List","message"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACjB,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;AADiB,MAETK,EAFS,GAEFD,MAAM,CAACE,KAFL,CAETD,EAFS;;AAAA,kBAGKH,QAAQ,CAAC,EAAD,CAHb;AAAA,MAGVK,GAHU;AAAA,MAGLC,MAHK;;AAAA,mBAIGN,QAAQ,CAAC,EAAD,CAJX;AAAA,MAIVO,EAJU;AAAA,MAINC,KAJM;;AAAA,mBAKeR,QAAQ,CAAC,EAAD,CALvB;AAAA,MAKVS,QALU;AAAA,MAKAC,WALA;;AAOjB,WAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACfN,IAAAA,MAAM,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACH;;AAED,WAASC,QAAT,GAAoB;AAChBR,IAAAA,EAAE,CAACS,IAAH,CAAQX,GAAR;AACH,GAbgB,CAgBnB;;;AACEN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIkB,KAAK,GAAG,EAAZ;AACA,QAAId,EAAE,GAAGe,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BF,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BC,MAA7B,GAAsC,CAAnE,CAAT;AACA,QAAId,EAAE,GAAI,IAAIe,SAAJ,CAAc,yBAAuBnB,EAArC,CAAV;AACAI,IAAAA,EAAE,CAACgB,gBAAH,CAAoB,SAApB,EAA+B,UAACC,IAAD,EAAU;AACrCP,MAAAA,KAAK,CAACQ,IAAN,CAAWD,IAAI,CAACA,IAAhB;AACAd,MAAAA,WAAW,CAACO,KAAD,CAAX;AACH,KAHD;AAIAT,IAAAA,KAAK,CAACD,EAAD,CAAL;AACD,GATQ,EASN,EATM,CAAT;AAcA,SACC,4BACG,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEE;AAAhB,IADH,EAEG,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEJ,GAAd;AAAmB,IAAA,MAAM,EAAEM,MAA3B;AAAmC,IAAA,GAAG,EAAEI;AAAxC,IAFH,CADD;AAMD,CArCD,C,CAuCA;;;GAvCMd,I;UACWH,S;;;KADXG,I;;AAwCN,SAASyB,KAAT,CAAeC,KAAf,EAAsB;AAClB,SACI,mBACI;AAAO,IAAA,KAAK,EAAEA,KAAK,CAACb,KAApB;AAA2B,IAAA,QAAQ,EAAEa,KAAK,CAAChB;AAA3C,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAEgB,KAAK,CAACC;AAAvB,0BAFJ,CADJ;AAMH,C,CAGD;;;MAVSF,K;;AAWT,SAASG,IAAT,CAAcF,KAAd,EAAqB;AACjB,MAAIlB,QAAQ,GAAGkB,KAAK,CAAClB,QAArB;AAEA,MAAIqB,KAAK,GAAGrB,QAAQ,CAACsB,GAAT,CAAa,UAACC,OAAD,EAAa;AACnC,WAAO,MAAC,IAAD;AAAM,MAAA,OAAO,EAAEA,OAAf;AAAwB,MAAA,GAAG,EAAEA,OAAO,CAACC,QAAR;AAA7B,MAAP;AACF,GAFW,CAAZ;AAGAC,EAAAA,OAAO,CAACN,GAAR,CAAYnB,QAAZ,EAAsBqB,KAAtB;AACA,SACA,kBACCA,KADD,CADA;AAKC;;MAZID,I;;AAcT,SAASM,IAAT,CAAcR,KAAd,EAAqB;AACjB,SAAO,kBAAKA,KAAK,CAACS,OAAX,CAAP;AACH;;MAFQD,I;AAMT,eAAelC,IAAf","sourcesContent":["import { useRouter } from 'next/router'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst Post = () => {\r\n  const router = useRouter()\r\n  const { id } = router.query\r\n  const [val, setVal] = useState(\"\")\r\n  const [ws, setWs] = useState(\"\")\r\n  const [messages, setMessages] = useState([])\r\n\r\n  function change(e) {\r\n      setVal(e.target.value)\r\n  }\r\n\r\n  function sendData() {\r\n      ws.send(val)\r\n  }\r\n\r\n\r\n// Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n  useEffect(() => {\r\n    let items = []\r\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n    let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n    ws.addEventListener(\"message\", (data) => {\r\n        items.push(data.data)\r\n        setMessages(items)\r\n    })\r\n    setWs(ws)\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  return (\r\n   <>\r\n      <Info messages={messages}/>\r\n      <Input value={val} change={change} log={sendData} />\r\n   </>\r\n  )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction Input(props) {\r\n    return (\r\n        <div>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Click me to change</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// Render all messages\r\nfunction Info(props) {\r\n    let messages = props.messages\r\n    \r\n    let lists = messages.map((element) => {\r\n       return <List message={element} key={element.toString()}/>\r\n    })\r\n    console.log(messages, lists)\r\n    return (\r\n    <ul>\r\n    {lists}\r\n    </ul>\r\n    )\r\n    }\r\n\r\nfunction List(props) {\r\n    return <li>{props.message}</li>\r\n}\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}