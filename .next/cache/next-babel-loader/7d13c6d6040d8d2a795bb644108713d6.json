{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, lazy, Suspense } from 'react';\nimport styles from \"../../styles/chatroom.module.css\";\nimport username from \"../../styles/create_a_name.module.css\";\nconst EnterUser = lazy(() => import('../../components/login.js'));\n\nfunction Post() {\n  const {\n    0: valid,\n    1: setValid\n  } = useState(false); // Check if they have a username, if not ask them for one\n\n  useEffect(() => {\n    if (document.cookie.split(\";\").some(element => element.includes(\"username\"))) {\n      setValid(true);\n    }\n  });\n\n  function changeValidation() {\n    setValid(true);\n  } // If the client has an username cookie use it to connect to the chat, otherwise\n  // give them a special forum to create their username and THEN connect them to the chat\n\n\n  return __jsx(React.Fragment, null, valid && __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Main, null)), !valid && __jsx(Suspense, null, __jsx(EnterUser, null))); // Either make it load dynamic components or revert it back to it's working state\n}\n\nfunction Header() {\n  const {\n    0: path,\n    1: setPath\n  } = useState(\"\");\n  useEffect(() => {\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    setPath(id.replace(/%20/gi, \" \"));\n  }, []);\n  return __jsx(\"h1\", {\n    id: styles.heading\n  }, \"Chat Room: \", path);\n}\n\nfunction Main(props) {\n  const {\n    0: val,\n    1: setVal\n  } = useState(\"\");\n  const {\n    0: ws,\n    1: setWs\n  } = useState(\"\");\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: connected,\n    1: setConnected\n  } = useState(0);\n  const {\n    0: user,\n    1: setUser\n  } = useState(\"\");\n\n  function change(e) {\n    setVal(e.target.value);\n  } // Send a message (to the server) to be broadcasted to all connected clients \n\n\n  function sendData() {\n    if (val === \"\") return;\n    ws.send(`${user}: ${val}`);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(() => {\n    let items = []; // This saves ALL messages\n\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1].replace(/%20/gi, \"\");\n    let ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    let validUser = document.cookie.split(\";\").find(element => element.includes(\"username\")).split(\"=\")[1];\n    ws.addEventListener(\"message\", addItems);\n    ws.addEventListener(\"open\", () => {\n      ws.send(`${validUser} has joined the chat`);\n    });\n    window.addEventListener(\"unload\", () => {\n      ws.send(`${validUser} has left the chat`);\n    });\n\n    function addItems(info) {\n      let data = JSON.parse(info.data);\n      let newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n      // Catch a message from the server containing the updated number of members\n      // and update it\n\n      if (data.connected !== undefined) {\n        setConnected(data.connected);\n        return;\n      }\n\n      newItems.unshift(data.data);\n      items.unshift(data.data);\n      setMessages(newItems);\n      setUser(validUser);\n    }\n\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, {\n    messages: messages\n  }), __jsx(MessageSender, {\n    value: val,\n    change: change,\n    log: sendData\n  }), __jsx(MemberList, {\n    clients: connected\n  }));\n} // Loads all incoming messages in the chat\n\n\nfunction MessageLogger(props) {\n  let messages = props.messages;\n  let listMessages = messages.map(element => {\n    return __jsx(Message, {\n      data: element,\n      key: `${element.toString()}${Math.floor(Math.random() * 100000)}`\n    });\n  });\n  return __jsx(\"div\", {\n    id: styles.msgLogger\n  }, __jsx(\"ul\", {\n    id: styles.messages\n  }, listMessages));\n} // Render the input and the submit button\n\n\nfunction MessageSender(props) {\n  // Runs when user presses enter on the input (instead of clicking send message btn)\n  function sendMessage(e) {\n    if (e.which === 13 || e.keyStroke === 13) return props.log();\n  }\n\n  return __jsx(\"div\", {\n    id: styles.sendMessages\n  }, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change,\n    onKeyPress: sendMessage\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Send\"));\n} // The number of connected members\n\n\nfunction MemberList(props) {\n  return __jsx(\"div\", {\n    id: styles.connected\n  }, __jsx(\"h1\", null, \"Connected Members: \", props.clients));\n}\n\nfunction Message(props) {\n  return __jsx(\"li\", null, props.data);\n}\n\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}