{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\n\nfunction Post() {\n  return __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Post2, null));\n}\n\n_c = Post;\n\nfunction Header() {\n  //console.log(location.pathname)\n  return __jsx(\"h1\", null, \"Chat Room: \");\n}\n\n_c2 = Header;\n\nvar Post2 = function Post2() {\n  _s();\n\n  var _useState = useState(\"\"),\n      val = _useState[0],\n      setVal = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      ws = _useState2[0],\n      setWs = _useState2[1];\n\n  var _useState3 = useState([]),\n      messages = _useState3[0],\n      setMessages = _useState3[1];\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function sendData() {\n    ws.send(val);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(function () {\n    var items = []; // This saves ALL messages\n\n    var id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    var ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    ws.addEventListener(\"message\", function (data) {\n      var newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n\n      newItems.push(data.data);\n      items.push(data.data);\n      setMessages(newItems);\n    });\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, null), __jsx(Input, {\n    value: val,\n    change: change,\n    log: sendData\n  }));\n};\n\n_s(Post2, \"x6QF6x7p0Ge2ht2reIvPG8+E5oA=\");\n\n_c3 = Post2;\n\nfunction MessageLogger() {\n  return __jsx(\"h1\", null, \"Test Section\");\n} // Render the input and the submit button\n\n\n_c4 = MessageLogger;\n\nfunction Input(props) {\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Click me to change\"));\n}\n\n_c5 = Input;\nexport default Post;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Post2\");\n$RefreshReg$(_c4, \"MessageLogger\");\n$RefreshReg$(_c5, \"Input\");","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useEffect","useState","Post","Header","Post2","val","setVal","ws","setWs","messages","setMessages","change","e","target","value","sendData","send","items","id","location","pathname","split","length","WebSocket","addEventListener","data","newItems","slice","push","MessageLogger","Input","props","log"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAKA,SAASC,IAAT,GAAgB;AACZ,SACI,4BACA,MAAC,MAAD,OADA,EAEA,MAAC,KAAD,OAFA,CADJ;AAMH;;KAPQA,I;;AAUT,SAASC,MAAT,GAAkB;AACd;AACA,SACI,gCADJ;AAGH;;MALQA,M;;AAOT,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA;;AAAA,kBACIH,QAAQ,CAAC,EAAD,CADZ;AAAA,MACXI,GADW;AAAA,MACNC,MADM;;AAAA,mBAEEL,QAAQ,CAAC,EAAD,CAFV;AAAA,MAEXM,EAFW;AAAA,MAEPC,KAFO;;AAAA,mBAGcP,QAAQ,CAAC,EAAD,CAHtB;AAAA,MAGXQ,QAHW;AAAA,MAGDC,WAHC;;AAKlB,WAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACfN,IAAAA,MAAM,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACH;;AAED,WAASC,QAAT,GAAoB;AAChBR,IAAAA,EAAE,CAACS,IAAH,CAAQX,GAAR;AACAC,IAAAA,MAAM,CAAC,EAAD,CAAN;AACH,GAZiB,CAepB;;;AACEN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIiB,KAAK,GAAG,EAAZ,CADc,CACC;;AACf,QAAIC,EAAE,GAAGC,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BF,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BC,MAA7B,GAAsC,CAAnE,CAAT;AACA,QAAIf,EAAE,GAAI,IAAIgB,SAAJ,CAAc,yBAAuBL,EAArC,CAAV;AACAX,IAAAA,EAAE,CAACiB,gBAAH,CAAoB,SAApB,EAA+B,UAACC,IAAD,EAAU;AACrC,UAAIC,QAAQ,GAAGT,KAAK,CAACU,KAAN,CAAY,CAAZ,CAAf,CADqC,CACN;;AAC/BD,MAAAA,QAAQ,CAACE,IAAT,CAAcH,IAAI,CAACA,IAAnB;AACAR,MAAAA,KAAK,CAACW,IAAN,CAAWH,IAAI,CAACA,IAAhB;AACAf,MAAAA,WAAW,CAACgB,QAAD,CAAX;AACH,KALD;AAMAlB,IAAAA,KAAK,CAACD,EAAD,CAAL,CAVc,CAUJ;AACX,GAXQ,EAWN,EAXM,CAAT;AAgBA,SACC,4BACE,MAAC,aAAD,OADF,EAEE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEF,GAAd;AAAmB,IAAA,MAAM,EAAEM,MAA3B;AAAmC,IAAA,GAAG,EAAEI;AAAxC,IAFF,CADD;AAMD,CAtCD;;GAAMX,K;;MAAAA,K;;AA0CN,SAASyB,aAAT,GAAyB;AACrB,SACI,iCADJ;AAGH,C,CAGD;;;MAPSA,a;;AAQT,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB,SACI,mBACI;AAAO,IAAA,KAAK,EAAEA,KAAK,CAACjB,KAApB;AAA2B,IAAA,QAAQ,EAAEiB,KAAK,CAACpB;AAA3C,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAEoB,KAAK,CAACC;AAAvB,0BAFJ,CADJ;AAMH;;MAPQF,K;AAYT,eAAe5B,IAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\n\r\n\r\n\r\nfunction Post() {\r\n    return (\r\n        <>\r\n        <Header />\r\n        <Post2 />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction Header() {\r\n    //console.log(location.pathname)\r\n    return (\r\n        <h1>Chat Room: </h1>\r\n    )\r\n}\r\n\r\nconst Post2 = () => {\r\n  const [val, setVal] = useState(\"\")\r\n  const [ws, setWs] = useState(\"\")\r\n  const [messages, setMessages] = useState([])\r\n\r\n  function change(e) {\r\n      setVal(e.target.value)\r\n  }\r\n\r\n  function sendData() {\r\n      ws.send(val)\r\n      setVal(\"\")\r\n  }\r\n\r\n\r\n// Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n  useEffect(() => {\r\n    let items = [] // This saves ALL messages\r\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n    let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n    ws.addEventListener(\"message\", (data) => {\r\n        let newItems = items.slice(0,) // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n        newItems.push(data.data)\r\n        items.push(data.data)\r\n        setMessages(newItems)\r\n    })\r\n    setWs(ws) // set the WebSocket to be global\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  return (\r\n   <>\r\n     <MessageLogger />\r\n     <Input value={val} change={change} log={sendData} />\r\n   </>\r\n  )\r\n}\r\n\r\n\r\n\r\nfunction MessageLogger() {\r\n    return (\r\n        <h1>Test Section</h1>\r\n    )\r\n}\r\n\r\n\r\n// Render the input and the submit button\r\nfunction Input(props) {\r\n    return (\r\n        <div>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Click me to change</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}