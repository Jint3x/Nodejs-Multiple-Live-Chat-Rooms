{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport styles from \"../../styles/chatroom.module.css\";\nimport username from \"../../styles/create_a_name.module.css\";\n\nfunction Post() {\n  _s();\n\n  var _useState = useState(false),\n      valid = _useState[0],\n      setValid = _useState[1]; // Check if they have a username, if not ask them for one\n\n\n  useEffect(function () {\n    if (document.cookie.split(\";\").some(function (element) {\n      return element.includes(\"username\");\n    })) {\n      setValid(false);\n    } else {\n      setValid(false);\n    }\n  }); // If the client has an username cookie use it to connect to the chat, otherwise\n  // give them a special forum to create their username and THEN connect them to the chat\n\n  return __jsx(React.Fragment, null, valid && __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Main, null)), !valid && __jsx(EnterUser, null));\n}\n\n_s(Post, \"s2BkWX/tapHuHfh22OeWDCUmNC4=\");\n\n_c = Post;\n\nfunction EnterUser() {\n  _s2();\n\n  var _useState2 = useState(\"\"),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  function update(e) {\n    setUser(e.target.value);\n  }\n\n  function LogIn() {\n    if (user === \"\") return; // Do not log empty names\n\n    document.cookkie = \"username=\".concat(user);\n  }\n\n  return __jsx(\"div\", {\n    id: username.main\n  }, __jsx(\"div\", {\n    id: username.center\n  }, __jsx(\"h1\", null, \"Please login to continue\"), __jsx(\"input\", {\n    type: \"text\",\n    value: user,\n    placeholder: \"Ex: xx_Minecrafter_xx\",\n    onChange: update\n  }), __jsx(\"br\", null), __jsx(\"button\", {\n    onClick: \"test\"\n  }, \"Login\")));\n}\n\n_s2(EnterUser, \"O8A1O7ueRI69RLawqs90Wgk1R68=\");\n\n_c2 = EnterUser;\n\nfunction Header() {\n  _s3();\n\n  var _useState3 = useState(\"\"),\n      path = _useState3[0],\n      setPath = _useState3[1];\n\n  useEffect(function () {\n    var id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    setPath(id.replace(/%20/gi, \" \"));\n  }, []);\n  return __jsx(\"h1\", {\n    id: styles.heading\n  }, \"Chat Room: \", path);\n}\n\n_s3(Header, \"tzQ3iVYXtOYCxKLDj33ymqqe1Q0=\");\n\n_c3 = Header;\n\nfunction Main(props) {\n  _s4();\n\n  var _useState4 = useState(\"\"),\n      val = _useState4[0],\n      setVal = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      ws = _useState5[0],\n      setWs = _useState5[1];\n\n  var _useState6 = useState([]),\n      messages = _useState6[0],\n      setMessages = _useState6[1];\n\n  var _useState7 = useState(0),\n      connected = _useState7[0],\n      setConnected = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      user = _useState8[0],\n      setUser = _useState8[1];\n\n  function change(e) {\n    setVal(e.target.value);\n  } // Send a message (to the server) to be broadcasted to all connected clients \n\n\n  function sendData() {\n    if (val === \"\") return;\n    ws.send(\"\".concat(user, \": \").concat(val));\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(function () {\n    var items = []; // This saves ALL messages\n\n    var id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1].replace(/%20/gi, \"\");\n    var ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    var validUser = document.cookie.split(\";\").find(function (element) {\n      return element.includes(\"username\");\n    }).split(\"=\")[1];\n    ws.addEventListener(\"message\", addItems);\n    ws.addEventListener(\"open\", function () {\n      ws.send(\"\".concat(validUser, \" has joined the chat\"));\n    });\n    window.addEventListener(\"unload\", function () {\n      ws.send(\"\".concat(validUser, \" has left the chat\"));\n    });\n\n    function addItems(info) {\n      var data = JSON.parse(info.data);\n      var newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n      // Catch a message from the server containing the updated number of members\n      // and update it\n\n      if (data.connected !== undefined) {\n        setConnected(data.connected);\n        return;\n      }\n\n      newItems.unshift(data.data);\n      items.unshift(data.data);\n      setMessages(newItems);\n      setUser(validUser);\n    }\n\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, {\n    messages: messages\n  }), __jsx(MessageSender, {\n    value: val,\n    change: change,\n    log: sendData\n  }), __jsx(MemberList, {\n    clients: connected\n  }));\n} // Loads all incoming messages in the chat\n\n\n_s4(Main, \"C5y29eWMoyRds+XFMlYrWwR0Bs4=\");\n\n_c4 = Main;\n\nfunction MessageLogger(props) {\n  var messages = props.messages;\n  var listMessages = messages.map(function (element) {\n    return __jsx(Message, {\n      data: element,\n      key: \"\".concat(element.toString()).concat(Math.floor(Math.random() * 100000))\n    });\n  });\n  return __jsx(\"div\", {\n    id: styles.msgLogger\n  }, __jsx(\"ul\", {\n    id: styles.messages\n  }, listMessages));\n} // Render the input and the submit button\n\n\n_c5 = MessageLogger;\n\nfunction MessageSender(props) {\n  // Runs when user presses enter on the input (instead of clicking send message btn)\n  function sendMessage(e) {\n    if (e.which === 13 || e.keyStroke === 13) return props.log();\n  }\n\n  return __jsx(\"div\", {\n    id: styles.sendMessages\n  }, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change,\n    onKeyPress: sendMessage\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Send\"));\n} // The number of connected members\n\n\n_c6 = MessageSender;\n\nfunction MemberList(props) {\n  return __jsx(\"div\", {\n    id: styles.connected\n  }, __jsx(\"h1\", null, \"Connected Members: \", props.clients));\n}\n\n_c7 = MemberList;\n\nfunction Message(props) {\n  return __jsx(\"li\", null, props.data);\n}\n\n_c8 = Message;\nexport default Post;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"EnterUser\");\n$RefreshReg$(_c3, \"Header\");\n$RefreshReg$(_c4, \"Main\");\n$RefreshReg$(_c5, \"MessageLogger\");\n$RefreshReg$(_c6, \"MessageSender\");\n$RefreshReg$(_c7, \"MemberList\");\n$RefreshReg$(_c8, \"Message\");","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useEffect","useState","styles","username","Post","valid","setValid","document","cookie","split","some","element","includes","EnterUser","user","setUser","update","e","target","value","LogIn","cookkie","main","center","Header","path","setPath","id","location","pathname","length","replace","heading","Main","props","val","setVal","ws","setWs","messages","setMessages","connected","setConnected","change","sendData","send","items","WebSocket","validUser","find","addEventListener","addItems","window","info","data","JSON","parse","newItems","slice","undefined","unshift","MessageLogger","listMessages","map","toString","Math","floor","random","msgLogger","MessageSender","sendMessage","which","keyStroke","log","sendMessages","MemberList","clients","Message"],"mappings":";;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,QAAP,MAAqB,uCAArB;;AAKA,SAASC,IAAT,GAAgB;AAAA;;AAAA,kBACcH,QAAQ,CAAC,KAAD,CADtB;AAAA,MACLI,KADK;AAAA,MACEC,QADF,iBAGZ;;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIO,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2BC,IAA3B,CAAgC,UAAAC,OAAO;AAAA,aAAIA,OAAO,CAACC,QAAR,CAAiB,UAAjB,CAAJ;AAAA,KAAvC,CAAJ,EAA8E;AAC3EN,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACF,KAFD,MAEO;AACHA,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACH;AACJ,GANQ,CAAT,CAJY,CAaZ;AACA;;AACA,SACI,4BACED,KAAK,IACH,4BACA,MAAC,MAAD,OADA,EAEA,MAAC,IAAD,OAFA,CAFJ,EAQE,CAACA,KAAD,IAAW,MAAC,SAAD,OARb,CADJ;AAaH;;GA5BQD,I;;KAAAA,I;;AA8BT,SAASS,SAAT,GAAqB;AAAA;;AAAA,mBACOZ,QAAQ,CAAC,EAAD,CADf;AAAA,MACVa,IADU;AAAA,MACJC,OADI;;AAGjB,WAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACfF,IAAAA,OAAO,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACH;;AAED,WAASC,KAAT,GAAiB;AACb,QAAIN,IAAI,KAAK,EAAb,EAAiB,OADJ,CACW;;AAExBP,IAAAA,QAAQ,CAACc,OAAT,sBAA+BP,IAA/B;AACH;;AAID,SACI;AAAK,IAAA,EAAE,EAAEX,QAAQ,CAACmB;AAAlB,KACI;AAAK,IAAA,EAAE,EAAEnB,QAAQ,CAACoB;AAAlB,KACI,6CADJ,EAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAET,IAA1B;AAAgC,IAAA,WAAW,EAAC,uBAA5C;AAAoE,IAAA,QAAQ,EAAEE;AAA9E,IAFJ,EAGI,iBAHJ,EAII;AAAQ,IAAA,OAAO,EAAC;AAAhB,aAJJ,CADJ,CADJ;AAaH;;IA5BQH,S;;MAAAA,S;;AA+BT,SAASW,MAAT,GAAkB;AAAA;;AAAA,mBACUvB,QAAQ,CAAC,EAAD,CADlB;AAAA,MACPwB,IADO;AAAA,MACDC,OADC;;AAGd1B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI2B,EAAE,GAAGC,QAAQ,CAACC,QAAT,CAAkBpB,KAAlB,CAAwB,GAAxB,EAA6BmB,QAAQ,CAACC,QAAT,CAAkBpB,KAAlB,CAAwB,GAAxB,EAA6BqB,MAA7B,GAAsC,CAAnE,CAAT;AACAJ,IAAAA,OAAO,CAACC,EAAE,CAACI,OAAH,CAAW,OAAX,EAAoB,GAApB,CAAD,CAAP;AACH,GAHQ,EAGN,EAHM,CAAT;AAKA,SACA;AAAI,IAAA,EAAE,EAAE7B,MAAM,CAAC8B;AAAf,oBAAoCP,IAApC,CADA;AAGH;;IAXQD,M;;MAAAA,M;;AAgBT,SAASS,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAAA,mBACKjC,QAAQ,CAAC,EAAD,CADb;AAAA,MACVkC,GADU;AAAA,MACLC,MADK;;AAAA,mBAEGnC,QAAQ,CAAC,EAAD,CAFX;AAAA,MAEVoC,EAFU;AAAA,MAENC,KAFM;;AAAA,mBAGerC,QAAQ,CAAC,EAAD,CAHvB;AAAA,MAGVsC,QAHU;AAAA,MAGAC,WAHA;;AAAA,mBAIiBvC,QAAQ,CAAC,CAAD,CAJzB;AAAA,MAIVwC,SAJU;AAAA,MAICC,YAJD;;AAAA,mBAKOzC,QAAQ,CAAC,EAAD,CALf;AAAA,MAKVa,IALU;AAAA,MAKJC,OALI;;AAOjB,WAAS4B,MAAT,CAAgB1B,CAAhB,EAAmB;AACfmB,IAAAA,MAAM,CAACnB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACH,GATgB,CAWjB;;;AACA,WAASyB,QAAT,GAAoB;AAChB,QAAIT,GAAG,KAAK,EAAZ,EAAgB;AAChBE,IAAAA,EAAE,CAACQ,IAAH,WAAW/B,IAAX,eAAoBqB,GAApB;AACAC,IAAAA,MAAM,CAAC,EAAD,CAAN;AACH,GAhBgB,CAmBnB;;;AACEpC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI8C,KAAK,GAAG,EAAZ,CADc,CACC;;AACf,QAAInB,EAAE,GAAGC,QAAQ,CAACC,QAAT,CAAkBpB,KAAlB,CAAwB,GAAxB,EAA6BmB,QAAQ,CAACC,QAAT,CAAkBpB,KAAlB,CAAwB,GAAxB,EAA6BqB,MAA7B,GAAsC,CAAnE,EAAsEC,OAAtE,CAA8E,OAA9E,EAAuF,EAAvF,CAAT;AACA,QAAIM,EAAE,GAAI,IAAIU,SAAJ,CAAc,yBAAuBpB,EAArC,CAAV;AACA,QAAIqB,SAAS,GAAGzC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2BwC,IAA3B,CAAgC,UAAAtC,OAAO;AAAA,aAAIA,OAAO,CAACC,QAAR,CAAiB,UAAjB,CAAJ;AAAA,KAAvC,EAAyEH,KAAzE,CAA+E,GAA/E,EAAoF,CAApF,CAAhB;AAEA4B,IAAAA,EAAE,CAACa,gBAAH,CAAoB,SAApB,EAA+BC,QAA/B;AAGAd,IAAAA,EAAE,CAACa,gBAAH,CAAoB,MAApB,EAA4B,YAAM;AAC9Bb,MAAAA,EAAE,CAACQ,IAAH,WAAWG,SAAX;AACH,KAFD;AAKAI,IAAAA,MAAM,CAACF,gBAAP,CAAwB,QAAxB,EAAkC,YAAM;AACpCb,MAAAA,EAAE,CAACQ,IAAH,WAAWG,SAAX;AACH,KAFD;;AAKD,aAASG,QAAT,CAAkBE,IAAlB,EAAwB;AACrB,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACC,IAAhB,CAAX;AACA,UAAIG,QAAQ,GAAGX,KAAK,CAACY,KAAN,CAAY,CAAZ,CAAf,CAFqB,CAEW;AAEhC;AACA;;AACA,UAAIJ,IAAI,CAACb,SAAL,KAAmBkB,SAAvB,EAAkC;AAC9BjB,QAAAA,YAAY,CAACY,IAAI,CAACb,SAAN,CAAZ;AACA;AACH;;AAEDgB,MAAAA,QAAQ,CAACG,OAAT,CAAiBN,IAAI,CAACA,IAAtB;AACAR,MAAAA,KAAK,CAACc,OAAN,CAAcN,IAAI,CAACA,IAAnB;AACAd,MAAAA,WAAW,CAACiB,QAAD,CAAX;AACA1C,MAAAA,OAAO,CAACiC,SAAD,CAAP;AACF;;AAEAV,IAAAA,KAAK,CAACD,EAAD,CAAL,CApCc,CAoCJ;AAEX,GAtCQ,EAsCN,EAtCM,CAAT;AAwCA,SACI,4BACA,MAAC,aAAD;AAAe,IAAA,QAAQ,EAAEE;AAAzB,IADA,EAEA,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEJ,GAAtB;AAA2B,IAAA,MAAM,EAAEQ,MAAnC;AAA2C,IAAA,GAAG,EAAEC;AAAhD,IAFA,EAGA,MAAC,UAAD;AAAY,IAAA,OAAO,EAAEH;AAArB,IAHA,CADJ;AAOH,C,CAGD;;;IAtESR,I;;MAAAA,I;;AAuET,SAAS4B,aAAT,CAAuB3B,KAAvB,EAA8B;AAC1B,MAAIK,QAAQ,GAAGL,KAAK,CAACK,QAArB;AACA,MAAIuB,YAAY,GAAGvB,QAAQ,CAACwB,GAAT,CAAa,UAAApD,OAAO,EAAI;AACvC,WAAO,MAAC,OAAD;AAAS,MAAA,IAAI,EAAEA,OAAf;AAAwB,MAAA,GAAG,YAAKA,OAAO,CAACqD,QAAR,EAAL,SAA0BC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B,CAA1B;AAA3B,MAAP;AACH,GAFkB,CAAnB;AAKA,SACI;AAAK,IAAA,EAAE,EAAEjE,MAAM,CAACkE;AAAhB,KACI;AAAI,IAAA,EAAE,EAAElE,MAAM,CAACqC;AAAf,KACCuB,YADD,CADJ,CADJ;AAOH,C,CAED;;;MAhBSD,a;;AAiBT,SAASQ,aAAT,CAAuBnC,KAAvB,EAA8B;AAE1B;AACA,WAASoC,WAAT,CAAqBrD,CAArB,EAAwB;AACpB,QAAIA,CAAC,CAACsD,KAAF,KAAY,EAAZ,IAAkBtD,CAAC,CAACuD,SAAF,KAAgB,EAAtC,EAA0C,OAAOtC,KAAK,CAACuC,GAAN,EAAP;AAC7C;;AAED,SACI;AAAK,IAAA,EAAE,EAAEvE,MAAM,CAACwE;AAAhB,KAEI;AACA,IAAA,KAAK,EAAExC,KAAK,CAACf,KADb;AAEA,IAAA,QAAQ,EAAEe,KAAK,CAACS,MAFhB;AAGA,IAAA,UAAU,EAAE2B;AAHZ,IAFJ,EAQI;AAAQ,IAAA,OAAO,EAAEpC,KAAK,CAACuC;AAAvB,YARJ,CADJ;AAaH,C,CAGD;;;MAvBSJ,a;;AAwBT,SAASM,UAAT,CAAoBzC,KAApB,EAA2B;AACvB,SACI;AAAK,IAAA,EAAE,EAAEhC,MAAM,CAACuC;AAAhB,KACF,yCAAwBP,KAAK,CAAC0C,OAA9B,CADE,CADJ;AAKH;;MANQD,U;;AAST,SAASE,OAAT,CAAiB3C,KAAjB,EAAwB;AACpB,SAAO,kBAAKA,KAAK,CAACoB,IAAX,CAAP;AACH;;MAFQuB,O;AAOT,eAAezE,IAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport styles from \"../../styles/chatroom.module.css\"\r\nimport username from \"../../styles/create_a_name.module.css\"\r\n\r\n\r\n\r\n\r\nfunction Post() {\r\n    const [valid, setValid] = useState(false)\r\n\r\n    // Check if they have a username, if not ask them for one\r\n    useEffect(() => {\r\n        if (document.cookie.split(\";\").some(element => element.includes(\"username\"))) {\r\n           setValid(false)\r\n        } else {\r\n            setValid(false)\r\n        }\r\n    })\r\n\r\n  \r\n    // If the client has an username cookie use it to connect to the chat, otherwise\r\n    // give them a special forum to create their username and THEN connect them to the chat\r\n    return (\r\n        <>\r\n        { valid && (\r\n            <>\r\n            <Header />\r\n            <Main/>\r\n            </>\r\n        )}\r\n\r\n        { !valid && (<EnterUser/>)}\r\n        </>\r\n       \r\n    )\r\n}\r\n\r\nfunction EnterUser() {\r\n    const [user, setUser] = useState(\"\")\r\n\r\n    function update(e) {\r\n        setUser(e.target.value)\r\n    }\r\n\r\n    function LogIn() {\r\n        if (user === \"\") return // Do not log empty names\r\n\r\n        document.cookkie = `username=${user}`\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div id={username.main}>\r\n            <div id={username.center}>\r\n                <h1>Please login to continue</h1>\r\n                <input type=\"text\" value={user} placeholder=\"Ex: xx_Minecrafter_xx\" onChange={update} />\r\n                <br />\r\n                <button onClick=\"test\" >Login</button>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    ) \r\n}\r\n\r\n\r\nfunction Header() {\r\n    const [path, setPath] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n        setPath(id.replace(/%20/gi, \" \"))\r\n    }, [])\r\n\r\n    return (\r\n    <h1 id={styles.heading}>Chat Room: {path}</h1>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction Main(props) {\r\n    const [val, setVal] = useState(\"\")\r\n    const [ws, setWs] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n    const [connected, setConnected] = useState(0)\r\n    const [user, setUser] = useState(\"\")\r\n\r\n    function change(e) {\r\n        setVal(e.target.value)\r\n    }\r\n  \r\n    // Send a message (to the server) to be broadcasted to all connected clients \r\n    function sendData() {\r\n        if (val === \"\") return;\r\n        ws.send(`${user}: ${val}`)\r\n        setVal(\"\")\r\n    }\r\n  \r\n  \r\n  // Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n    useEffect(() => {\r\n      let items = [] // This saves ALL messages\r\n      let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1].replace(/%20/gi, \"\");\r\n      let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n      let validUser = document.cookie.split(\";\").find(element => element.includes(\"username\")).split(\"=\")[1];\r\n\r\n      ws.addEventListener(\"message\", addItems) \r\n\r\n\r\n      ws.addEventListener(\"open\", () => {\r\n          ws.send(`${validUser} has joined the chat`)\r\n      })\r\n\r\n\r\n      window.addEventListener(\"unload\", () => {\r\n          ws.send(`${validUser} has left the chat`)\r\n      })\r\n\r\n      \r\n     function addItems(info) {\r\n        let data = JSON.parse(info.data)\r\n        let newItems = items.slice(0,)  // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n\r\n        // Catch a message from the server containing the updated number of members\r\n        // and update it\r\n        if (data.connected !== undefined) {\r\n            setConnected(data.connected)\r\n            return;\r\n        }\r\n\r\n        newItems.unshift(data.data)\r\n        items.unshift(data.data)\r\n        setMessages(newItems)\r\n        setUser(validUser)\r\n     }\r\n  \r\n      setWs(ws) // set the WebSocket to be global\r\n     \r\n    }, [])\r\n  \r\n    return (\r\n        <>\r\n        <MessageLogger messages={messages}/>\r\n        <MessageSender value={val} change={change} log={sendData} />\r\n        <MemberList clients={connected}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// Loads all incoming messages in the chat\r\nfunction MessageLogger(props) {\r\n    let messages = props.messages\r\n    let listMessages = messages.map(element => {\r\n        return <Message data={element} key={`${element.toString()}${Math.floor(Math.random() * 100000)}`} />\r\n    })\r\n\r\n\r\n    return (\r\n        <div id={styles.msgLogger}>\r\n            <ul id={styles.messages}>\r\n            {listMessages}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction MessageSender(props) {\r\n\r\n    // Runs when user presses enter on the input (instead of clicking send message btn)\r\n    function sendMessage(e) {\r\n        if (e.which === 13 || e.keyStroke === 13) return props.log()\r\n    }\r\n\r\n    return (\r\n        <div id={styles.sendMessages}>\r\n\r\n            <input \r\n            value={props.value} \r\n            onChange={props.change} \r\n            onKeyPress={sendMessage} \r\n            />\r\n\r\n            <button onClick={props.log}>Send</button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// The number of connected members\r\nfunction MemberList(props) {\r\n    return (\r\n        <div id={styles.connected}>\r\n      <h1>Connected Members: {props.clients}</h1>\r\n      </div>\r\n    ) \r\n}\r\n\r\n\r\nfunction Message(props) {\r\n    return <li>{props.data}</li>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}