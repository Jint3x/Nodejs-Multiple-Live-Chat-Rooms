{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport styles from \"../../styles/chatroom.module.css\";\nimport username from \"../../styles/create_a_name.module.css\";\n\nfunction Post() {\n  const {\n    0: valid,\n    1: setValid\n  } = useState(false); // Check if they have a username, if not ask them for one\n\n  useEffect(() => {\n    if (document.cookie.split(\";\").some(element => element.includes(\"username\"))) {\n      setValid(true);\n    }\n  });\n\n  function changeValidation() {\n    setValid(true);\n  } // If the client has an username cookie use it to connect to the chat, otherwise\n  // give them a special forum to create their username and THEN connect them to the chat\n\n\n  return __jsx(React.Fragment, null, valid && __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Main, null)), !valid && __jsx(EnterUser, {\n    done: changeValidation\n  }));\n}\n\nfunction EnterUser(props) {\n  const {\n    0: user,\n    1: setUser\n  } = useState(\"\");\n\n  function update(e) {\n    setUser(e.target.value);\n  }\n\n  function LogIn() {\n    if (user === \"\") return; // Do not log empty names\n\n    document.cookie = `username=${user}`;\n    props.done();\n  }\n\n  return __jsx(\"div\", {\n    id: username.main\n  }, __jsx(\"div\", {\n    id: username.center\n  }, __jsx(\"h1\", null, \"Please login to continue\"), __jsx(\"input\", {\n    type: \"text\",\n    value: user,\n    placeholder: \"Ex: xx_Minecrafter_xx\",\n    onChange: update\n  }), __jsx(\"br\", null), __jsx(\"button\", {\n    onClick: LogIn\n  }, \"Login\")));\n}\n\nfunction Header() {\n  const {\n    0: path,\n    1: setPath\n  } = useState(\"\");\n  useEffect(() => {\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    setPath(id.replace(/%20/gi, \" \"));\n  }, []);\n  return __jsx(\"h1\", {\n    id: styles.heading\n  }, \"Chat Room: \", path);\n}\n\nfunction Main(props) {\n  const {\n    0: val,\n    1: setVal\n  } = useState(\"\");\n  const {\n    0: ws,\n    1: setWs\n  } = useState(\"\");\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const {\n    0: connected,\n    1: setConnected\n  } = useState(0);\n  const {\n    0: user,\n    1: setUser\n  } = useState(\"\");\n\n  function change(e) {\n    setVal(e.target.value);\n  } // Send a message (to the server) to be broadcasted to all connected clients \n\n\n  function sendData() {\n    if (val === \"\") return;\n    ws.send(`${user}: ${val}`);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(() => {\n    let items = []; // This saves ALL messages\n\n    let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1].replace(/%20/gi, \"\");\n    let ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    let validUser = document.cookie.split(\";\").find(element => element.includes(\"username\")).split(\"=\")[1];\n    ws.addEventListener(\"message\", addItems);\n    ws.addEventListener(\"open\", () => {\n      ws.send(`${validUser} has joined the chat`);\n    });\n    window.addEventListener(\"unload\", () => {\n      ws.send(`${validUser} has left the chat`);\n    });\n\n    function addItems(info) {\n      let data = JSON.parse(info.data);\n      let newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n      // Catch a message from the server containing the updated number of members\n      // and update it\n\n      if (data.connected !== undefined) {\n        setConnected(data.connected);\n        return;\n      }\n\n      newItems.unshift(data.data);\n      items.unshift(data.data);\n      setMessages(newItems);\n      setUser(validUser);\n    }\n\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, {\n    messages: messages\n  }), __jsx(MessageSender, {\n    value: val,\n    change: change,\n    log: sendData\n  }), __jsx(MemberList, {\n    clients: connected\n  }));\n} // Loads all incoming messages in the chat\n\n\nfunction MessageLogger(props) {\n  let messages = props.messages;\n  let listMessages = messages.map(element => {\n    return __jsx(Message, {\n      data: element,\n      key: `${element.toString()}${Math.floor(Math.random() * 100000)}`\n    });\n  });\n  return __jsx(\"div\", {\n    id: styles.msgLogger\n  }, __jsx(\"ul\", {\n    id: styles.messages\n  }, listMessages));\n} // Render the input and the submit button\n\n\nfunction MessageSender(props) {\n  // Runs when user presses enter on the input (instead of clicking send message btn)\n  function sendMessage(e) {\n    if (e.which === 13 || e.keyStroke === 13) return props.log();\n  }\n\n  return __jsx(\"div\", {\n    id: styles.sendMessages\n  }, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change,\n    onKeyPress: sendMessage\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Send\"));\n} // The number of connected members\n\n\nfunction MemberList(props) {\n  return __jsx(\"div\", {\n    id: styles.connected\n  }, __jsx(\"h1\", null, \"Connected Members: \", props.clients));\n}\n\nfunction Message(props) {\n  return __jsx(\"li\", null, props.data);\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useEffect","useState","styles","username","Post","valid","setValid","document","cookie","split","some","element","includes","changeValidation","EnterUser","props","user","setUser","update","e","target","value","LogIn","done","main","center","Header","path","setPath","id","location","pathname","length","replace","heading","Main","val","setVal","ws","setWs","messages","setMessages","connected","setConnected","change","sendData","send","items","WebSocket","validUser","find","addEventListener","addItems","window","info","data","JSON","parse","newItems","slice","undefined","unshift","MessageLogger","listMessages","map","toString","Math","floor","random","msgLogger","MessageSender","sendMessage","which","keyStroke","log","sendMessages","MemberList","clients","Message"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport styles from \"../../styles/chatroom.module.css\"\r\nimport username from \"../../styles/create_a_name.module.css\"\r\n\r\n\r\n\r\n\r\nfunction Post() {\r\n    const [valid, setValid] = useState(false)\r\n\r\n    // Check if they have a username, if not ask them for one\r\n    useEffect(() => {\r\n        if (document.cookie.split(\";\").some(element => element.includes(\"username\"))) {\r\n           setValid(true)\r\n        }\r\n    })\r\n\r\n    function changeValidation() {\r\n        setValid(true)\r\n    }\r\n\r\n  \r\n    // If the client has an username cookie use it to connect to the chat, otherwise\r\n    // give them a special forum to create their username and THEN connect them to the chat\r\n    return (\r\n        <>\r\n        { valid && (\r\n            <>\r\n            <Header />\r\n            <Main/>\r\n            </>\r\n        )}\r\n\r\n        { !valid && (<EnterUser done={changeValidation}/>)}\r\n        </>\r\n       \r\n    )\r\n}\r\n\r\nfunction EnterUser(props) {\r\n    const [user, setUser] = useState(\"\")\r\n\r\n    function update(e) {\r\n        setUser(e.target.value)\r\n    }\r\n\r\n    function LogIn() {\r\n        if (user === \"\") return // Do not log empty names\r\n\r\n\r\n        document.cookie = `username=${user}`\r\n        props.done()\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div id={username.main}>\r\n            <div id={username.center}>\r\n                <h1>Please login to continue</h1>\r\n                <input type=\"text\" value={user} placeholder=\"Ex: xx_Minecrafter_xx\" onChange={update} />\r\n                <br />\r\n                <button onClick={LogIn} >Login</button>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    ) \r\n}\r\n\r\n\r\nfunction Header() {\r\n    const [path, setPath] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n        setPath(id.replace(/%20/gi, \" \"))\r\n    }, [])\r\n\r\n    return (\r\n    <h1 id={styles.heading}>Chat Room: {path}</h1>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction Main(props) {\r\n    const [val, setVal] = useState(\"\")\r\n    const [ws, setWs] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n    const [connected, setConnected] = useState(0)\r\n    const [user, setUser] = useState(\"\")\r\n\r\n    function change(e) {\r\n        setVal(e.target.value)\r\n    }\r\n  \r\n    // Send a message (to the server) to be broadcasted to all connected clients \r\n    function sendData() {\r\n        if (val === \"\") return;\r\n        ws.send(`${user}: ${val}`)\r\n        setVal(\"\")\r\n    }\r\n  \r\n  \r\n  // Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n    useEffect(() => {\r\n      let items = [] // This saves ALL messages\r\n      let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1].replace(/%20/gi, \"\");\r\n      let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n      let validUser = document.cookie.split(\";\").find(element => element.includes(\"username\")).split(\"=\")[1];\r\n\r\n      ws.addEventListener(\"message\", addItems) \r\n\r\n\r\n      ws.addEventListener(\"open\", () => {\r\n          ws.send(`${validUser} has joined the chat`)\r\n      })\r\n\r\n\r\n      window.addEventListener(\"unload\", () => {\r\n          ws.send(`${validUser} has left the chat`)\r\n      })\r\n\r\n      \r\n     function addItems(info) {\r\n        let data = JSON.parse(info.data)\r\n        let newItems = items.slice(0,)  // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n\r\n        // Catch a message from the server containing the updated number of members\r\n        // and update it\r\n        if (data.connected !== undefined) {\r\n            setConnected(data.connected)\r\n            return;\r\n        }\r\n\r\n        newItems.unshift(data.data)\r\n        items.unshift(data.data)\r\n        setMessages(newItems)\r\n        setUser(validUser)\r\n     }\r\n  \r\n      setWs(ws) // set the WebSocket to be global\r\n     \r\n    }, [])\r\n  \r\n    return (\r\n        <>\r\n        <MessageLogger messages={messages}/>\r\n        <MessageSender value={val} change={change} log={sendData} />\r\n        <MemberList clients={connected}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// Loads all incoming messages in the chat\r\nfunction MessageLogger(props) {\r\n    let messages = props.messages\r\n    let listMessages = messages.map(element => {\r\n        return <Message data={element} key={`${element.toString()}${Math.floor(Math.random() * 100000)}`} />\r\n    })\r\n\r\n\r\n    return (\r\n        <div id={styles.msgLogger}>\r\n            <ul id={styles.messages}>\r\n            {listMessages}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction MessageSender(props) {\r\n\r\n    // Runs when user presses enter on the input (instead of clicking send message btn)\r\n    function sendMessage(e) {\r\n        if (e.which === 13 || e.keyStroke === 13) return props.log()\r\n    }\r\n\r\n    return (\r\n        <div id={styles.sendMessages}>\r\n\r\n            <input \r\n            value={props.value} \r\n            onChange={props.change} \r\n            onKeyPress={sendMessage} \r\n            />\r\n\r\n            <button onClick={props.log}>Send</button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// The number of connected members\r\nfunction MemberList(props) {\r\n    return (\r\n        <div id={styles.connected}>\r\n      <h1>Connected Members: {props.clients}</h1>\r\n      </div>\r\n    ) \r\n}\r\n\r\n\r\nfunction Message(props) {\r\n    return <li>{props.data}</li>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}