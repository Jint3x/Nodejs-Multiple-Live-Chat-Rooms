{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport styles from \"../../styles/chatroom.module.css\";\n\nfunction Post(req, res) {\n  return __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Main, null));\n}\n\n_c = Post;\n\nfunction Header() {\n  _s();\n\n  var _useState = useState(\"\"),\n      path = _useState[0],\n      setPath = _useState[1];\n\n  useEffect(function () {\n    console.log(document.cookie);\n    var username = prompt(\"Enter your username\");\n    document.cookie = {\n      username: username\n    };\n    var id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    setPath(id);\n  }, []);\n  return __jsx(\"h1\", {\n    id: styles.heading\n  }, \"Chat Room: \", path);\n}\n\n_s(Header, \"tzQ3iVYXtOYCxKLDj33ymqqe1Q0=\");\n\n_c2 = Header;\n\nfunction Main() {\n  _s2();\n\n  var _useState2 = useState(\"\"),\n      val = _useState2[0],\n      setVal = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      ws = _useState3[0],\n      setWs = _useState3[1];\n\n  var _useState4 = useState([]),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  var _useState5 = useState(0),\n      connected = _useState5[0],\n      setConnected = _useState5[1];\n\n  function change(e) {\n    setVal(e.target.value);\n  }\n\n  function sendData() {\n    ws.send(val);\n    setVal(\"\");\n  } // Connect to webhook upon rendering the page and add in into a state so you can access it later\n\n\n  useEffect(function () {\n    var items = []; // This saves ALL messages\n\n    var id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\n    var ws = new WebSocket(\"ws://localhost:8080/\" + id);\n    ws.addEventListener(\"message\", addItems);\n\n    function addItems(info) {\n      var data = JSON.parse(info.data);\n      var newItems = items.slice(0); // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\n\n      if (data.connected !== undefined) {\n        setConnected(data.connected);\n        return;\n      }\n\n      newItems.unshift(data.data);\n      items.unshift(data.data);\n      setMessages(newItems);\n    }\n\n    setWs(ws); // set the WebSocket to be global\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(MessageLogger, {\n    messages: messages\n  }), __jsx(MessageSender, {\n    value: val,\n    change: change,\n    log: sendData\n  }), __jsx(MemberList, {\n    clients: connected\n  }));\n}\n\n_s2(Main, \"SdCVlbO7rJIodyoRqBSXeUUCJlU=\");\n\n_c3 = Main;\n\nfunction MessageLogger(props) {\n  var messages = props.messages;\n  var listMessages = messages.map(function (element) {\n    return __jsx(Message, {\n      data: element,\n      key: element.toString()\n    });\n  });\n  return __jsx(\"div\", {\n    id: styles.msgLogger\n  }, __jsx(\"ul\", {\n    id: styles.messages\n  }, listMessages));\n} // Render the input and the submit button\n\n\n_c4 = MessageLogger;\n\nfunction MessageSender(props) {\n  return __jsx(\"div\", {\n    id: styles.SendMessages\n  }, __jsx(\"input\", {\n    value: props.value,\n    onChange: props.change\n  }), __jsx(\"button\", {\n    onClick: props.log\n  }, \"Send Message\"));\n}\n\n_c5 = MessageSender;\n\nfunction MemberList(props) {\n  return __jsx(\"div\", {\n    id: styles.connected\n  }, __jsx(\"h1\", null, \"Currently Connected Members: \", props.clients));\n}\n\n_c6 = MemberList;\n\nfunction Message(props) {\n  return __jsx(\"li\", null, props.data);\n}\n\n_c7 = Message;\nexport default Post;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Main\");\n$RefreshReg$(_c4, \"MessageLogger\");\n$RefreshReg$(_c5, \"MessageSender\");\n$RefreshReg$(_c6, \"MemberList\");\n$RefreshReg$(_c7, \"Message\");","map":{"version":3,"sources":["C:/Users/Shi/Desktop/Live Chat/pages/chat/[id].js"],"names":["useEffect","useState","styles","Post","req","res","Header","path","setPath","console","log","document","cookie","username","prompt","id","location","pathname","split","length","heading","Main","val","setVal","ws","setWs","messages","setMessages","connected","setConnected","change","e","target","value","sendData","send","items","WebSocket","addEventListener","addItems","info","data","JSON","parse","newItems","slice","undefined","unshift","MessageLogger","props","listMessages","map","element","toString","msgLogger","MessageSender","SendMessages","MemberList","clients","Message"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport styles from \"../../styles/chatroom.module.css\"\r\n\r\n\r\n\r\n\r\nfunction Post(req, res) {\r\n    return (\r\n        <>\r\n        <Header />\r\n        <Main />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction Header() {\r\n\r\n\r\n    const [path, setPath] = useState(\"\")\r\n    useEffect(() => {\r\n\r\n        console.log(document.cookie)\r\n        let username = prompt(\"Enter your username\")\r\n        document.cookie = {username:username}\r\n        let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n        setPath(id)\r\n    }, [])\r\n\r\n\r\n    return (\r\n    <h1 id={styles.heading}>Chat Room: {path}</h1>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction Main() {\r\n    const [val, setVal] = useState(\"\")\r\n    const [ws, setWs] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n    const [connected, setConnected] = useState(0)\r\n\r\n    function change(e) {\r\n        setVal(e.target.value)\r\n    }\r\n  \r\n    function sendData() {\r\n        ws.send(val)\r\n        setVal(\"\")\r\n    }\r\n  \r\n  \r\n  // Connect to webhook upon rendering the page and add in into a state so you can access it later\r\n    useEffect(() => {\r\n      let items = [] // This saves ALL messages\r\n      let id = location.pathname.split(\"/\")[location.pathname.split(\"/\").length - 1];\r\n      let ws =  new WebSocket(\"ws://localhost:8080/\"+id);\r\n\r\n      ws.addEventListener(\"message\", addItems) \r\n\r\n\r\n\r\n     function addItems(info) {\r\n        let data = JSON.parse(info.data)\r\n        let newItems = items.slice(0,)  // We create another arr, so when we set it with setMessages the page will refresh and the list (Info) will update\r\n\r\n        if (data.connected !== undefined) {\r\n            setConnected(data.connected)\r\n            return;\r\n        }\r\n\r\n        newItems.unshift(data.data)\r\n        items.unshift(data.data)\r\n        setMessages(newItems)\r\n     }\r\n  \r\n      setWs(ws) // set the WebSocket to be global\r\n     \r\n    }, [])\r\n  \r\n    return (\r\n        <>\r\n        <MessageLogger messages={messages}/>\r\n        <MessageSender value={val} change={change} log={sendData} />\r\n        <MemberList clients={connected}/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction MessageLogger(props) {\r\n    let messages = props.messages\r\n    let listMessages = messages.map(element => {\r\n        return <Message data={element} key={element.toString()} />\r\n    })\r\n\r\n\r\n    return (\r\n        <div id={styles.msgLogger}>\r\n            <ul id={styles.messages}>\r\n            {listMessages}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Render the input and the submit button\r\nfunction MessageSender(props) {\r\n    return (\r\n        <div id={styles.SendMessages}>\r\n            <input value={props.value} onChange={props.change} />\r\n            <button onClick={props.log}>Send Message</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction MemberList(props) {\r\n    return (\r\n        <div id={styles.connected}>\r\n      <h1>Currently Connected Members: {props.clients}</h1>\r\n      </div>\r\n    ) \r\n}\r\n\r\n\r\nfunction Message(props) {\r\n    return <li>{props.data}</li>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}